#!/usr/bin/env python
# -*- coding: utf-8; mode: python; -*-

"""
   File specs:
   From https://tulospalvelu.vaalit.fi/EKV-2019/ohje/
     - Vaalien_tulostiedostojen_kuvaus_EKV-EPV-2019_EN.pdf
     - Vaalijarjestelma-XML-skeema.pdf

"""

from csv import DictWriter
from datetime import datetime
from functools import reduce
from io import BytesIO
from json import dump, load
from operator import __add__
from sys import exit
from xml.etree.ElementTree import fromstring
#from lxml.etree import fromstring, parse
from zipfile import ZipFile

from requests import get

import inspect
def name(var):
    callers_local_vars = inspect.currentframe().f_back.f_locals.items()
    return [var_name for var_name, var_val in callers_local_vars if var_val is var]

def name3(var):
    """
    Gets the name of var. Does it from the out most frame inner-wards.
    :param var: variable to get name from.
    :return: string
    """
    for fi in reversed(inspect.stack()):
        names = [var_name for var_name, var_val in fi.frame.f_locals.items() if var_val is var]
        if len(names) > 0:
            return names[0]


base_url = 'https://tulospalvelu.vaalit.fi/EKV-2019/'

xmlfiles = {
    'by_candidate': 'ekv-2019_teat_maa.xml',
    'by_party': 'ekv-2019_tpat_maa.xml',
    'by_region': 'ekv-2019_taat_maa.xml',
}

# 'rb' is important since the XML file contain the encoding information
# that the parse() function can extract and apply on the rest of the file
with open(xmlfiles['by_party'], 'r', encoding='iso-8859-1') as f:
    #root = parse(f).getroot()
    s = f.read()
    data = fromstring(s) #.getroot()


assert data.tag == name3(data), 'Expect tag to match variable name'

    
def dig(z):
    return (z.find('area-data'), z.findall('nominator'),
            z.findall('electoral-area'))
    

def join_(area_data, nominators, prefix):
    _ = list(map(lambda a: (prefix + '-' + a[0], a[1]),
                 area_data.items()))
    return [_ + i.items() for i in nominators]


def join(ea):
    i1, i2 = ea.items(), ea.find('area-data').items()
    ii = i1 + [('area-' + i[0], i[1]) for i in i2]
    assert len(ii) == len(i1) + len(i2), "Length missmatch"
    return [ii + i.items() for i in ea.findall('nominator')]


flatten = lambda l: [item for sublist in l for item in sublist]

def f(ea):
    _, __ = join(ea), ea.findall('electoral-area')
    if __:
        ___ =  [f(i) for i in ea.findall('electoral-area')]
        return _ + flatten(___)
    else: 
        return _


election = data.find('election')
assert election is not None, "Expected an 'election' element"
assert election.tag == name3(election), 'Expect tag to match variable name'
# election.items() holds the element attributes
# election has two types of children: a single country-data and many electoral area

country_data = election.find('country-data')
electoral_areas = election.findall('electoral-area')

_ = join(country_data) + flatten([f(i) for i in electoral_areas])
_ = [dict(j) for j in _]

    
exit(-1)

with open('kv-2012_tta_maa.xml', 'r', encoding='iso-8859-1') as _:
    data = fromstring(_.read())
assert data.tag == name3(data), 'Expect tag to match variable name'

country_data = election.find('country-data')
electoral_areas = election.findall('electoral-area')

_ = join(country_data) + flatten([f(i) for i in electoral_areas])
_ = [dict(j) for j in _]

